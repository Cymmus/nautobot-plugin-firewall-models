# Generated by Django 3.2.13 on 2022-05-10 15:45

import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import nautobot.extras.models.mixins
import nautobot.extras.models.statuses
import nautobot.ipam.fields
import nautobot_firewall_models.validators
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("extras", "0033_add__optimized_indexing"),
        ("ipam", "0007_add_natural_indexing"),
        ("dcim", "0009_add_natural_indexing"),
    ]

    operations = [
        migrations.CreateModel(
            name="AddressObject",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "verbose_name_plural": "Address Objects",
                "ordering": ["name"],
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin),
        ),
        migrations.CreateModel(
            name="AddressObjectGroup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=50, unique=True)),
                (
                    "address_objects",
                    models.ManyToManyField(
                        blank=True, related_name="address_object_groups", to="nautobot_firewall_models.AddressObject"
                    ),
                ),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nautobot_firewall_models_addressobjectgroup_related",
                        to="extras.status",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name_plural": "Address Object Groups",
                "ordering": ["name"],
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin),
        ),
        migrations.CreateModel(
            name="Policy",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=50, unique=True)),
            ],
            options={
                "verbose_name_plural": "Policies",
                "ordering": ["name"],
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin),
        ),
        migrations.CreateModel(
            name="PolicyRule",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=50)),
                ("action", models.CharField(max_length=20)),
                ("log", models.BooleanField(default=False)),
                ("request_id", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "destination_address",
                    models.ManyToManyField(
                        related_name="destination_policy_rules", to="nautobot_firewall_models.AddressObject"
                    ),
                ),
                (
                    "destination_address_group",
                    models.ManyToManyField(
                        related_name="destination_policy_rules", to="nautobot_firewall_models.AddressObjectGroup"
                    ),
                ),
            ],
            options={"ordering": ["name"], "verbose_name_plural": "Policy Rules"},
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin),
        ),
        migrations.CreateModel(
            name="ServiceObject",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=50)),
                ("slug", models.SlugField(editable=False)),
                (
                    "port",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        validators=[nautobot_firewall_models.validators.validate_port],
                    ),
                ),
                ("ip_protocol", models.CharField(max_length=20)),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nautobot_firewall_models_serviceobject_related",
                        to="extras.status",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name_plural": "Service Objects",
                "ordering": ["name"],
                "unique_together": {("slug", "port", "ip_protocol")},
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin),
        ),
        migrations.CreateModel(
            name="UserObject",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("username", models.CharField(max_length=50, unique=True)),
                ("name", models.CharField(blank=True, max_length=50)),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nautobot_firewall_models_userobject_related",
                        to="extras.status",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name_plural": "User Objects",
                "ordering": ["username"],
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin),
        ),
        migrations.CreateModel(
            name="Zone",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=50, unique=True)),
                ("interfaces", models.ManyToManyField(blank=True, related_name="zones", to="dcim.Interface")),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nautobot_firewall_models_zone_related",
                        to="extras.status",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
                ("vrfs", models.ManyToManyField(blank=True, related_name="zones", to="ipam.VRF")),
            ],
            options={
                "verbose_name_plural": "Zones",
                "ordering": ["name"],
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin),
        ),
        migrations.CreateModel(
            name="UserObjectGroup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=50, unique=True)),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nautobot_firewall_models_userobjectgroup_related",
                        to="extras.status",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "user_objects",
                    models.ManyToManyField(
                        blank=True, related_name="user_object_groups", to="nautobot_firewall_models.UserObject"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "User Object Groups",
                "ordering": ["name"],
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin),
        ),
        migrations.CreateModel(
            name="ServiceObjectGroup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=50, unique=True)),
                (
                    "service_objects",
                    models.ManyToManyField(
                        blank=True, related_name="service_object_groups", to="nautobot_firewall_models.ServiceObject"
                    ),
                ),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nautobot_firewall_models_serviceobjectgroup_related",
                        to="extras.status",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name_plural": "Service Object Groups",
                "ordering": ["name"],
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin),
        ),
        migrations.CreateModel(
            name="PolicyRuleM2M",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("index", models.PositiveSmallIntegerField(null=True, blank=True)),
                (
                    "policy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="nautobot_firewall_models.policy"
                    ),
                ),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="nautobot_firewall_models.policyrule"
                    ),
                ),
            ],
            options={
                "ordering": ["index"],
            },
        ),
        migrations.AddField(
            model_name="policyrule",
            name="destination_zone",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="destination_policy_rules",
                to="nautobot_firewall_models.zone",
            ),
        ),
        migrations.AddField(
            model_name="policyrule",
            name="service",
            field=models.ManyToManyField(related_name="policy_rules", to="nautobot_firewall_models.ServiceObject"),
        ),
        migrations.AddField(
            model_name="policyrule",
            name="service_group",
            field=models.ManyToManyField(related_name="policy_rules", to="nautobot_firewall_models.ServiceObjectGroup"),
        ),
        migrations.AddField(
            model_name="policyrule",
            name="source_address",
            field=models.ManyToManyField(
                related_name="source_policy_rules", to="nautobot_firewall_models.AddressObject"
            ),
        ),
        migrations.AddField(
            model_name="policyrule",
            name="source_address_group",
            field=models.ManyToManyField(
                related_name="source_policy_rules", to="nautobot_firewall_models.AddressObjectGroup"
            ),
        ),
        migrations.AddField(
            model_name="policyrule",
            name="source_user",
            field=models.ManyToManyField(related_name="policy_rules", to="nautobot_firewall_models.UserObject"),
        ),
        migrations.AddField(
            model_name="policyrule",
            name="source_user_group",
            field=models.ManyToManyField(related_name="policy_rules", to="nautobot_firewall_models.UserObjectGroup"),
        ),
        migrations.AddField(
            model_name="policyrule",
            name="source_zone",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="source_policy_rules",
                to="nautobot_firewall_models.zone",
            ),
        ),
        migrations.AddField(
            model_name="policyrule",
            name="status",
            field=nautobot.extras.models.statuses.StatusField(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="nautobot_firewall_models_policyrule_related",
                to="extras.status",
            ),
        ),
        migrations.AddField(
            model_name="policyrule",
            name="tags",
            field=taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag"),
        ),
        migrations.CreateModel(
            name="PolicyDynamicGroupM2M",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("weight", models.PositiveSmallIntegerField(default=100)),
                (
                    "dynamic_group",
                    models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="extras.dynamicgroup"),
                ),
                (
                    "policy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="nautobot_firewall_models.policy"
                    ),
                ),
            ],
            options={
                "ordering": ["weight"],
            },
        ),
        migrations.CreateModel(
            name="PolicyDeviceM2M",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("weight", models.PositiveSmallIntegerField(default=100)),
                ("device", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="dcim.device")),
                (
                    "policy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="nautobot_firewall_models.policy"
                    ),
                ),
            ],
            options={
                "ordering": ["weight"],
            },
        ),
        migrations.AddField(
            model_name="policy",
            name="devices",
            field=models.ManyToManyField(
                related_name="firewall_policies", through="nautobot_firewall_models.PolicyDeviceM2M", to="dcim.Device"
            ),
        ),
        migrations.AddField(
            model_name="policy",
            name="dynamic_groups",
            field=models.ManyToManyField(
                related_name="firewall_policies",
                through="nautobot_firewall_models.PolicyDynamicGroupM2M",
                to="extras.DynamicGroup",
            ),
        ),
        migrations.AddField(
            model_name="policy",
            name="policy_rules",
            field=models.ManyToManyField(
                related_name="policies",
                through="nautobot_firewall_models.PolicyRuleM2M",
                to="nautobot_firewall_models.PolicyRule",
            ),
        ),
        migrations.AddField(
            model_name="policy",
            name="status",
            field=nautobot.extras.models.statuses.StatusField(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="nautobot_firewall_models_policy_related",
                to="extras.status",
            ),
        ),
        migrations.AddField(
            model_name="policy",
            name="tags",
            field=taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag"),
        ),
        migrations.CreateModel(
            name="IPRange",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("start_address", nautobot.ipam.fields.VarbinaryIPField(db_index=True)),
                ("end_address", nautobot.ipam.fields.VarbinaryIPField(db_index=True)),
                ("description", models.CharField(blank=True, max_length=200)),
                ("size", models.PositiveIntegerField(editable=False)),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nautobot_firewall_models_iprange_related",
                        to="extras.status",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "vrf",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ip_ranges",
                        to="ipam.vrf",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "IP Ranges",
                "ordering": ["start_address"],
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin),
        ),
        migrations.CreateModel(
            name="FQDN",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=100, unique=True)),
                ("ip_addresses", models.ManyToManyField(blank=True, related_name="fqdns", to="ipam.IPAddress")),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nautobot_firewall_models_fqdn_related",
                        to="extras.status",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "FQDN",
                "verbose_name_plural": "FQDNs",
                "ordering": ["name"],
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin),
        ),
        migrations.AddField(
            model_name="addressobject",
            name="fqdn",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to="nautobot_firewall_models.fqdn"
            ),
        ),
        migrations.AddField(
            model_name="addressobject",
            name="ip_address",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to="ipam.ipaddress"
            ),
        ),
        migrations.AddField(
            model_name="addressobject",
            name="ip_range",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="nautobot_firewall_models.iprange",
            ),
        ),
        migrations.AddField(
            model_name="addressobject",
            name="prefix",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to="ipam.prefix"
            ),
        ),
        migrations.AddField(
            model_name="addressobject",
            name="status",
            field=nautobot.extras.models.statuses.StatusField(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="nautobot_firewall_models_addressobject_related",
                to="extras.status",
            ),
        ),
        migrations.AddField(
            model_name="addressobject",
            name="tags",
            field=taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag"),
        ),
        migrations.AddConstraint(
            model_name="policyrulem2m",
            constraint=models.UniqueConstraint(fields=("policy", "rule", "index"), name="unique_with_index"),
        ),
        migrations.AddConstraint(
            model_name="policyrulem2m",
            constraint=models.UniqueConstraint(
                condition=models.Q(("index", None)), fields=("policy", "rule"), name="unique_without_index"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="policydynamicgroupm2m",
            unique_together={("policy", "dynamic_group")},
        ),
        migrations.AlterUniqueTogether(
            name="policydevicem2m",
            unique_together={("policy", "device")},
        ),
        migrations.AddConstraint(
            model_name="iprange",
            constraint=models.UniqueConstraint(fields=("start_address", "end_address", "vrf"), name="unique_with_vrf"),
        ),
        migrations.AddConstraint(
            model_name="iprange",
            constraint=models.UniqueConstraint(
                condition=models.Q(("vrf", None)), fields=("start_address", "end_address"), name="unique_without_vrf"
            ),
        ),
    ]
