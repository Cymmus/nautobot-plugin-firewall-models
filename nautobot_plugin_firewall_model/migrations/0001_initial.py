# Generated by Django 3.1.13 on 2021-09-22 18:40

from django.db import migrations, models
import django.db.models.deletion
import nautobot.ipam.fields
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("ipam", "0004_fixup_p2p_broadcast"),
        ("dcim", "0005_device_local_context_schema"),
        ("extras", "0011_fileattachment_fileproxy"),
    ]

    operations = [
        migrations.CreateModel(
            name="AddressObject",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "verbose_name_plural": "Address Objects",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="AddressObjectGroup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=50, unique=True)),
            ],
            options={
                "verbose_name_plural": "Address Object Groups",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="AddressPolicyObject",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=50, unique=True)),
            ],
            options={
                "verbose_name_plural": "Address Policy Objects",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Destination",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("description", models.CharField(blank=True, max_length=200)),
            ],
            options={
                "verbose_name_plural": "Destinations",
                "ordering": ["description"],
            },
        ),
        migrations.CreateModel(
            name="FQDN",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "verbose_name_plural": "FQDNs",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="IPRange",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("start_address", nautobot.ipam.fields.VarbinaryIPField(db_index=True)),
                ("end_address", nautobot.ipam.fields.VarbinaryIPField(db_index=True)),
                ("description", models.CharField(blank=True, max_length=200)),
                ("size", models.PositiveIntegerField(editable=False)),
            ],
            options={
                "verbose_name_plural": "IP Ranges",
                "ordering": ["start_address"],
            },
        ),
        migrations.CreateModel(
            name="Policy",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=50, unique=True)),
            ],
            options={
                "verbose_name_plural": "Policies",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="PolicyRule",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("name", models.CharField(blank=True, max_length=50, null=True)),
                ("index", models.IntegerField()),
                ("action", models.CharField(max_length=20)),
                ("log", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name_plural": "Policy Rules",
                "ordering": ["index"],
            },
        ),
        migrations.CreateModel(
            name="ServiceObject",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=50)),
                ("slug", models.SlugField(editable=False)),
                ("port", models.IntegerField()),
                ("ip_protocol", models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                "verbose_name_plural": "Service Objects",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ServiceObjectGroup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=50, unique=True)),
                (
                    "service_objects",
                    models.ManyToManyField(blank=True, to="nautobot_plugin_firewall_model.ServiceObject"),
                ),
            ],
            options={
                "verbose_name_plural": "Service Object Groups",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ServicePolicyObject",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=50, unique=True)),
                (
                    "service_object_groups",
                    models.ManyToManyField(blank=True, to="nautobot_plugin_firewall_model.ServiceObjectGroup"),
                ),
                (
                    "service_objects",
                    models.ManyToManyField(blank=True, to="nautobot_plugin_firewall_model.ServiceObject"),
                ),
            ],
            options={
                "verbose_name_plural": "Service Policy Objects",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="UserObject",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("username", models.CharField(max_length=50, unique=True)),
                ("name", models.CharField(blank=True, max_length=50)),
            ],
            options={
                "verbose_name_plural": "User Objects",
                "ordering": ["username"],
            },
        ),
        migrations.CreateModel(
            name="UserObjectGroup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=50, unique=True)),
                ("user_objects", models.ManyToManyField(blank=True, to="nautobot_plugin_firewall_model.UserObject")),
            ],
            options={
                "verbose_name_plural": "User Object Groups",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Zone",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=50, unique=True)),
                ("interfaces", models.ManyToManyField(blank=True, to="dcim.Interface")),
                ("vrfs", models.ManyToManyField(blank=True, to="ipam.VRF")),
            ],
            options={
                "verbose_name_plural": "Zones",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="UserPolicyObject",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("description", models.CharField(blank=True, max_length=200)),
                ("name", models.CharField(max_length=50, unique=True)),
                (
                    "user_object_groups",
                    models.ManyToManyField(blank=True, to="nautobot_plugin_firewall_model.UserObjectGroup"),
                ),
                ("user_objects", models.ManyToManyField(blank=True, to="nautobot_plugin_firewall_model.UserObject")),
            ],
            options={
                "verbose_name_plural": "User Policy Objects",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Source",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("description", models.CharField(blank=True, max_length=200)),
                (
                    "address",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="nautobot_plugin_firewall_model.addresspolicyobject",
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="nautobot_plugin_firewall_model.servicepolicyobject",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="nautobot_plugin_firewall_model.userpolicyobject",
                    ),
                ),
                (
                    "zone",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="nautobot_plugin_firewall_model.zone",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Sources",
                "ordering": ["description"],
            },
        ),
        migrations.AddConstraint(
            model_name="serviceobject",
            constraint=models.UniqueConstraint(fields=("slug", "port", "ip_protocol"), name="unique_with_ip_protocol"),
        ),
        migrations.AddConstraint(
            model_name="serviceobject",
            constraint=models.UniqueConstraint(
                condition=models.Q(ip_protocol=None), fields=("slug", "port"), name="unique_without_ip_protocol"
            ),
        ),
        migrations.AddField(
            model_name="policyrule",
            name="destination",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="nautobot_plugin_firewall_model.destination"
            ),
        ),
        migrations.AddField(
            model_name="policyrule",
            name="source",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="nautobot_plugin_firewall_model.source"
            ),
        ),
        migrations.AddField(
            model_name="policyrule",
            name="tags",
            field=taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag"),
        ),
        migrations.AddField(
            model_name="policy",
            name="policy_rules",
            field=models.ManyToManyField(to="nautobot_plugin_firewall_model.PolicyRule"),
        ),
        migrations.AddField(
            model_name="iprange",
            name="vrf",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="ip_ranges",
                to="ipam.vrf",
            ),
        ),
        migrations.AddField(
            model_name="destination",
            name="address",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="nautobot_plugin_firewall_model.addresspolicyobject"
            ),
        ),
        migrations.AddField(
            model_name="destination",
            name="service",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="nautobot_plugin_firewall_model.servicepolicyobject"
            ),
        ),
        migrations.AddField(
            model_name="destination",
            name="zone",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="nautobot_plugin_firewall_model.zone",
            ),
        ),
        migrations.AddField(
            model_name="addresspolicyobject",
            name="address_object_groups",
            field=models.ManyToManyField(blank=True, to="nautobot_plugin_firewall_model.AddressObjectGroup"),
        ),
        migrations.AddField(
            model_name="addresspolicyobject",
            name="address_objects",
            field=models.ManyToManyField(blank=True, to="nautobot_plugin_firewall_model.AddressObject"),
        ),
        migrations.AddField(
            model_name="addressobjectgroup",
            name="address_objects",
            field=models.ManyToManyField(blank=True, to="nautobot_plugin_firewall_model.AddressObject"),
        ),
        migrations.AddField(
            model_name="addressobject",
            name="fqdn",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="nautobot_plugin_firewall_model.fqdn",
            ),
        ),
        migrations.AddField(
            model_name="addressobject",
            name="ip_address",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="ipam.ipaddress"
            ),
        ),
        migrations.AddField(
            model_name="addressobject",
            name="ip_range",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="nautobot_plugin_firewall_model.iprange",
            ),
        ),
        migrations.AddField(
            model_name="addressobject",
            name="prefix",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="ipam.prefix"
            ),
        ),
        migrations.AddConstraint(
            model_name="iprange",
            constraint=models.UniqueConstraint(fields=("start_address", "end_address", "vrf"), name="unique_with_vrf"),
        ),
        migrations.AddConstraint(
            model_name="iprange",
            constraint=models.UniqueConstraint(
                condition=models.Q(vrf=None), fields=("start_address", "end_address"), name="unique_without_vrf"
            ),
        ),
    ]
